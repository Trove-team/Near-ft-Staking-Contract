import { Button, TopCard } from "@/components";
import PageContainerDoubleSide from "@/components/PageContainerDoubleSide";
import React from "react";
import { Tab } from "@headlessui/react";
import Chart from "@/components/xjump-chart";
import MantleXTokenStakePanel from "@/components/modules/mantle/xtoken/stakePanel";
import { useContractRead } from "wagmi";
import { JUMP_MANTLE_ADDRESS, XJUMP_MANTLE_ADDRESS } from "@/env/contract";
import xTokenAbi from "@/contracts/XToken.json";
import { BigNumberish, ethers } from "ethers";
import MantleXTokenUnStakePanel from "@/components/modules/mantle/xtoken/unstakePanel";

export default function CoinStakingHome() {
  const [dashboardTab, setDashboardTab] = React.useState(0);

  const { data: StakedJump } = useContractRead({
    address: XJUMP_MANTLE_ADDRESS,
    abi: xTokenAbi.abi,
    functionName: "getTotalStaked",
    args: [],
  }) as {
    data: string;
  };

  const { data: ratio } = useContractRead({
    address: XJUMP_MANTLE_ADDRESS,
    abi: xTokenAbi.abi,
    functionName: "getRatio",
    args: [],
  }) as {
    data: string;
  };
  function renderChartDetailBox(name: string, value: string) {
    return (
      <div className="flex flex-col rounded-[20px] bg-white-600 p-4  sm:h-[80px] gap-y-4 w-auto md:w-[38.1%] lg:w-[28.1%]">
        <p className="text-3.5 leading-4 font-medium tracking-tight text-left">
          {name}
        </p>
        <strong className="block text-[1.125rem] leading-4 font-extrabold tracking-tight text-left">
          {value}
        </strong>
      </div>
    );
  }
  function renderChart(selectedData) {
    return (
      <div className="rounded-lg bg-white-600 p-6 flex flex-col">
        <div
          className="flex sm:flex-row flex-col justify-between items-start 
        sm:items-end gap-y-4"
        >
          <div className="flex flex-row gap-x-6 md:min-w-[70%] flex-1">
            {renderChartDetailBox(
              "xJump value",
              `${parseInt(ratio) / 100} JUMP`
            )}
            {renderChartDetailBox(
              "Total staked JUMP",
              `${parseFloat(ethers.formatEther(StakedJump ?? "0")).toFixed(
                3
              )} JUMP`
            )}
          </div>
          {/*  {renderChartPeriodSelect()} */}
        </div>
        <Chart
          label={Array.from({ length: 30 }, (_, i) => i + 1).map((i) => {
            return `2023-6-${i}`;
          })}
          value={Array.from({ length: 30 }, (_, i) => i + 1).map((i) => {
            return (i % 2) + 2 * i;
          })}
        />
      </div>
    );
  }
  function renderTab(selected: boolean, text: string) {
    return (
      <>
        <Button
          inline
          className={`${
            selected ? "font-bold" : "font-medium"
          } rounded-none h-auto text-4 leading-4 tracking-tight pb-2`}
        >
          {text}
        </Button>
        {selected && <hr className="h-1 mx-auto bg-violet border-none" />}
      </>
    );
  }
  function renderDashboard() {
    return (
      <div className="rounded-lg bg-white-600 px-6 py-4 pb-10 xJumpDashboard">
        <Tab.Group selectedIndex={dashboardTab} onChange={setDashboardTab}>
          <Tab.List className="space-x-2">
            <Tab className="outline-none">
              {({ selected }) => renderTab(selected, "Stake")}
            </Tab>
            <Tab className="outline-none">
              {({ selected }) => renderTab(selected, "Unstake")}
            </Tab>
          </Tab.List>
          <Tab.Panels>
            <Tab.Panel className="outline-none">
              <MantleXTokenStakePanel
                ratio={parseInt(ratio) / 100}
                tokenAddress={JUMP_MANTLE_ADDRESS}
                XtokenAddress={XJUMP_MANTLE_ADDRESS}
                RPC_URL="https://rpc.mantle.xyz"
              />
            </Tab.Panel>
            <Tab.Panel className="outline-none">
              <MantleXTokenUnStakePanel
                ratio={parseInt(ratio) / 100}
                tokenAddress={JUMP_MANTLE_ADDRESS}
                XtokenAddress={XJUMP_MANTLE_ADDRESS}
                RPC_URL="https://rpc.mantle.xyz"
              />
            </Tab.Panel>
          </Tab.Panels>
        </Tab.Group>
      </div>
    );
  }

  return (
    <PageContainerDoubleSide>
      <PageContainerDoubleSide.Left>
        <TopCard
          gradientText="JUMP Staking"
          bigText="xJUMP Single Stake Pool"
          bottomDescription={
            "By staking JUMP, users earn the fees generated by the Jump DeFi ecosystem of protocols. When you stake JUMP in the xJUMP Pool you receive xJUMP tokens. xJUMP is used to determine Jump Pad allocation tiers for token sales and is also used for governance over the Jump DAO."
          }
          jumpLogo
          small
        />
        {renderChart({})}
      </PageContainerDoubleSide.Left>
      <PageContainerDoubleSide.Right>
        {renderDashboard()}
      </PageContainerDoubleSide.Right>
    </PageContainerDoubleSide>
  );
}