/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface LaunchpadInterface extends utils.Interface {
  functions: {
    "accessCount(address)": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "addToWhitelist(uint256,address,uint256)": FunctionFragment;
    "admins(address)": FunctionFragment;
    "claimVesting(uint256)": FunctionFragment;
    "createProject(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "fundListing(uint256)": FunctionFragment;
    "getAllocationAmount(uint256,address)": FunctionFragment;
    "getProject(uint256)": FunctionFragment;
    "getProjectCount()": FunctionFragment;
    "getProjectCurrentPrice(uint256)": FunctionFragment;
    "getProjectInvestor(uint256,address)": FunctionFragment;
    "getReleasedAmount(uint256,address)": FunctionFragment;
    "invest(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "projects(uint256)": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removeFromWhitelist(uint256,address)": FunctionFragment;
    "removeProject(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAccessCount(address,uint256)": FunctionFragment;
    "setTier(address,uint256)": FunctionFragment;
    "tier(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accessCount"
      | "addAdmin"
      | "addToWhitelist"
      | "admins"
      | "claimVesting"
      | "createProject"
      | "fundListing"
      | "getAllocationAmount"
      | "getProject"
      | "getProjectCount"
      | "getProjectCurrentPrice"
      | "getProjectInvestor"
      | "getReleasedAmount"
      | "invest"
      | "owner"
      | "projects"
      | "removeAdmin"
      | "removeFromWhitelist"
      | "removeProject"
      | "renounceOwnership"
      | "setAccessCount"
      | "setTier"
      | "tier"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accessCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "admins",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimVesting",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundListing",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocationAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProject",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectCurrentPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectInvestor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReleasedAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProject",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessCount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTier",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "accessCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProjectCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleasedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccessCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ClaimVesting(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProjectCreated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimVesting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectCreated"): EventFragment;
}

export interface ClaimVestingEventObject {
  projectId: BigNumber;
  investor: string;
  amount: BigNumber;
}
export type ClaimVestingEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ClaimVestingEventObject
>;

export type ClaimVestingEventFilter = TypedEventFilter<ClaimVestingEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProjectCreatedEventObject {
  projectId: BigNumber;
}
export type ProjectCreatedEvent = TypedEvent<
  [BigNumber],
  ProjectCreatedEventObject
>;

export type ProjectCreatedEventFilter = TypedEventFilter<ProjectCreatedEvent>;

export interface Launchpad extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LaunchpadInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accessCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToWhitelist(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      _allowanceAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimVesting(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createProject(
      _owner: PromiseOrValue<string>,
      _saleToken: PromiseOrValue<string>,
      _vestingToken: PromiseOrValue<string>,
      _totalSaleAmount: PromiseOrValue<BigNumberish>,
      _tokenPerAllocation: PromiseOrValue<BigNumberish>,
      _privateStartTime: PromiseOrValue<BigNumberish>,
      _privateSaleDuration: PromiseOrValue<BigNumberish>,
      _publicStartTime: PromiseOrValue<BigNumberish>,
      _publicSaleDuration: PromiseOrValue<BigNumberish>,
      _vestingStartTime: PromiseOrValue<BigNumberish>,
      _initialReleasePercent: PromiseOrValue<BigNumberish>,
      _cliffStartTime: PromiseOrValue<BigNumberish>,
      _cliffDuration: PromiseOrValue<BigNumberish>,
      _nativePrivateSalePrice: PromiseOrValue<BigNumberish>,
      _nativePublicSalePrice: PromiseOrValue<BigNumberish>,
      _privateSalePrice: PromiseOrValue<BigNumberish>,
      _publicSalePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundListing(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllocationAmount(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProject(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean, boolean] & {
        owner: string;
        saleToken: string;
        vestingToken: string;
        totalSaleAmount: BigNumber;
        isPrivateSale: boolean;
        isPublicSale: boolean;
      }
    >;

    getProjectCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProjectCurrentPrice(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        saleTokenPrice: BigNumber;
        nativeTokenPrice: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getProjectInvestor(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        allowanceAmount: BigNumber;
        investedAmount: BigNumber;
        reminingVestingAmount: BigNumber;
        lastClaimTime: BigNumber;
      }
    >;

    getReleasedAmount(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    invest(
      _id: PromiseOrValue<BigNumberish>,
      _allocation: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        owner: string;
        totalSaleAmount: BigNumber;
        totalSoldAmount: BigNumber;
        totalInvestors: BigNumber;
        tokenPerAllocation: BigNumber;
        saleToken: string;
        vestingToken: string;
        privateSalePrice: BigNumber;
        publicSalePrice: BigNumber;
        nativePrivateSalePrice: BigNumber;
        nativePublicSalePrice: BigNumber;
        privateStartTime: BigNumber;
        privateEndTime: BigNumber;
        publicStartTime: BigNumber;
        publicEndTime: BigNumber;
        vestingStartTime: BigNumber;
        initialReleasePercent: BigNumber;
        cliffStartTime: BigNumber;
        cliffEndTime: BigNumber;
        allowTieredSale: boolean;
        vestingTokenFunedAmount: BigNumber;
        saleTokenReceived: BigNumber;
        nativeTokenReceived: BigNumber;
      }
    >;

    removeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFromWhitelist(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeProject(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAccessCount(
      _investor: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTier(
      _investor: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tier(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accessCount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToWhitelist(
    _id: PromiseOrValue<BigNumberish>,
    _investor: PromiseOrValue<string>,
    _allowanceAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admins(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimVesting(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createProject(
    _owner: PromiseOrValue<string>,
    _saleToken: PromiseOrValue<string>,
    _vestingToken: PromiseOrValue<string>,
    _totalSaleAmount: PromiseOrValue<BigNumberish>,
    _tokenPerAllocation: PromiseOrValue<BigNumberish>,
    _privateStartTime: PromiseOrValue<BigNumberish>,
    _privateSaleDuration: PromiseOrValue<BigNumberish>,
    _publicStartTime: PromiseOrValue<BigNumberish>,
    _publicSaleDuration: PromiseOrValue<BigNumberish>,
    _vestingStartTime: PromiseOrValue<BigNumberish>,
    _initialReleasePercent: PromiseOrValue<BigNumberish>,
    _cliffStartTime: PromiseOrValue<BigNumberish>,
    _cliffDuration: PromiseOrValue<BigNumberish>,
    _nativePrivateSalePrice: PromiseOrValue<BigNumberish>,
    _nativePublicSalePrice: PromiseOrValue<BigNumberish>,
    _privateSalePrice: PromiseOrValue<BigNumberish>,
    _publicSalePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundListing(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllocationAmount(
    _id: PromiseOrValue<BigNumberish>,
    _investor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProject(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, boolean, boolean] & {
      owner: string;
      saleToken: string;
      vestingToken: string;
      totalSaleAmount: BigNumber;
      isPrivateSale: boolean;
      isPublicSale: boolean;
    }
  >;

  getProjectCount(overrides?: CallOverrides): Promise<BigNumber>;

  getProjectCurrentPrice(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      saleTokenPrice: BigNumber;
      nativeTokenPrice: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getProjectInvestor(
    _id: PromiseOrValue<BigNumberish>,
    _investor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      allowanceAmount: BigNumber;
      investedAmount: BigNumber;
      reminingVestingAmount: BigNumber;
      lastClaimTime: BigNumber;
    }
  >;

  getReleasedAmount(
    _id: PromiseOrValue<BigNumberish>,
    _investor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  invest(
    _id: PromiseOrValue<BigNumberish>,
    _allocation: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  projects(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      owner: string;
      totalSaleAmount: BigNumber;
      totalSoldAmount: BigNumber;
      totalInvestors: BigNumber;
      tokenPerAllocation: BigNumber;
      saleToken: string;
      vestingToken: string;
      privateSalePrice: BigNumber;
      publicSalePrice: BigNumber;
      nativePrivateSalePrice: BigNumber;
      nativePublicSalePrice: BigNumber;
      privateStartTime: BigNumber;
      privateEndTime: BigNumber;
      publicStartTime: BigNumber;
      publicEndTime: BigNumber;
      vestingStartTime: BigNumber;
      initialReleasePercent: BigNumber;
      cliffStartTime: BigNumber;
      cliffEndTime: BigNumber;
      allowTieredSale: boolean;
      vestingTokenFunedAmount: BigNumber;
      saleTokenReceived: BigNumber;
      nativeTokenReceived: BigNumber;
    }
  >;

  removeAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFromWhitelist(
    _id: PromiseOrValue<BigNumberish>,
    _investor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeProject(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAccessCount(
    _investor: PromiseOrValue<string>,
    _count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTier(
    _investor: PromiseOrValue<string>,
    _tier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tier(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accessCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToWhitelist(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      _allowanceAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimVesting(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createProject(
      _owner: PromiseOrValue<string>,
      _saleToken: PromiseOrValue<string>,
      _vestingToken: PromiseOrValue<string>,
      _totalSaleAmount: PromiseOrValue<BigNumberish>,
      _tokenPerAllocation: PromiseOrValue<BigNumberish>,
      _privateStartTime: PromiseOrValue<BigNumberish>,
      _privateSaleDuration: PromiseOrValue<BigNumberish>,
      _publicStartTime: PromiseOrValue<BigNumberish>,
      _publicSaleDuration: PromiseOrValue<BigNumberish>,
      _vestingStartTime: PromiseOrValue<BigNumberish>,
      _initialReleasePercent: PromiseOrValue<BigNumberish>,
      _cliffStartTime: PromiseOrValue<BigNumberish>,
      _cliffDuration: PromiseOrValue<BigNumberish>,
      _nativePrivateSalePrice: PromiseOrValue<BigNumberish>,
      _nativePublicSalePrice: PromiseOrValue<BigNumberish>,
      _privateSalePrice: PromiseOrValue<BigNumberish>,
      _publicSalePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundListing(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllocationAmount(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProject(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean, boolean] & {
        owner: string;
        saleToken: string;
        vestingToken: string;
        totalSaleAmount: BigNumber;
        isPrivateSale: boolean;
        isPublicSale: boolean;
      }
    >;

    getProjectCount(overrides?: CallOverrides): Promise<BigNumber>;

    getProjectCurrentPrice(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        saleTokenPrice: BigNumber;
        nativeTokenPrice: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getProjectInvestor(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        allowanceAmount: BigNumber;
        investedAmount: BigNumber;
        reminingVestingAmount: BigNumber;
        lastClaimTime: BigNumber;
      }
    >;

    getReleasedAmount(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invest(
      _id: PromiseOrValue<BigNumberish>,
      _allocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        owner: string;
        totalSaleAmount: BigNumber;
        totalSoldAmount: BigNumber;
        totalInvestors: BigNumber;
        tokenPerAllocation: BigNumber;
        saleToken: string;
        vestingToken: string;
        privateSalePrice: BigNumber;
        publicSalePrice: BigNumber;
        nativePrivateSalePrice: BigNumber;
        nativePublicSalePrice: BigNumber;
        privateStartTime: BigNumber;
        privateEndTime: BigNumber;
        publicStartTime: BigNumber;
        publicEndTime: BigNumber;
        vestingStartTime: BigNumber;
        initialReleasePercent: BigNumber;
        cliffStartTime: BigNumber;
        cliffEndTime: BigNumber;
        allowTieredSale: boolean;
        vestingTokenFunedAmount: BigNumber;
        saleTokenReceived: BigNumber;
        nativeTokenReceived: BigNumber;
      }
    >;

    removeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromWhitelist(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProject(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAccessCount(
      _investor: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTier(
      _investor: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tier(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimVesting(uint256,address,uint256)"(
      projectId?: null,
      investor?: null,
      amount?: null
    ): ClaimVestingEventFilter;
    ClaimVesting(
      projectId?: null,
      investor?: null,
      amount?: null
    ): ClaimVestingEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProjectCreated(uint256)"(projectId?: null): ProjectCreatedEventFilter;
    ProjectCreated(projectId?: null): ProjectCreatedEventFilter;
  };

  estimateGas: {
    accessCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToWhitelist(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      _allowanceAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimVesting(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createProject(
      _owner: PromiseOrValue<string>,
      _saleToken: PromiseOrValue<string>,
      _vestingToken: PromiseOrValue<string>,
      _totalSaleAmount: PromiseOrValue<BigNumberish>,
      _tokenPerAllocation: PromiseOrValue<BigNumberish>,
      _privateStartTime: PromiseOrValue<BigNumberish>,
      _privateSaleDuration: PromiseOrValue<BigNumberish>,
      _publicStartTime: PromiseOrValue<BigNumberish>,
      _publicSaleDuration: PromiseOrValue<BigNumberish>,
      _vestingStartTime: PromiseOrValue<BigNumberish>,
      _initialReleasePercent: PromiseOrValue<BigNumberish>,
      _cliffStartTime: PromiseOrValue<BigNumberish>,
      _cliffDuration: PromiseOrValue<BigNumberish>,
      _nativePrivateSalePrice: PromiseOrValue<BigNumberish>,
      _nativePublicSalePrice: PromiseOrValue<BigNumberish>,
      _privateSalePrice: PromiseOrValue<BigNumberish>,
      _publicSalePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundListing(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllocationAmount(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProject(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProjectCount(overrides?: CallOverrides): Promise<BigNumber>;

    getProjectCurrentPrice(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProjectInvestor(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleasedAmount(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invest(
      _id: PromiseOrValue<BigNumberish>,
      _allocation: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFromWhitelist(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeProject(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAccessCount(
      _investor: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTier(
      _investor: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tier(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accessCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToWhitelist(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      _allowanceAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimVesting(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createProject(
      _owner: PromiseOrValue<string>,
      _saleToken: PromiseOrValue<string>,
      _vestingToken: PromiseOrValue<string>,
      _totalSaleAmount: PromiseOrValue<BigNumberish>,
      _tokenPerAllocation: PromiseOrValue<BigNumberish>,
      _privateStartTime: PromiseOrValue<BigNumberish>,
      _privateSaleDuration: PromiseOrValue<BigNumberish>,
      _publicStartTime: PromiseOrValue<BigNumberish>,
      _publicSaleDuration: PromiseOrValue<BigNumberish>,
      _vestingStartTime: PromiseOrValue<BigNumberish>,
      _initialReleasePercent: PromiseOrValue<BigNumberish>,
      _cliffStartTime: PromiseOrValue<BigNumberish>,
      _cliffDuration: PromiseOrValue<BigNumberish>,
      _nativePrivateSalePrice: PromiseOrValue<BigNumberish>,
      _nativePublicSalePrice: PromiseOrValue<BigNumberish>,
      _privateSalePrice: PromiseOrValue<BigNumberish>,
      _publicSalePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundListing(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllocationAmount(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProject(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProjectCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProjectCurrentPrice(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProjectInvestor(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReleasedAmount(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invest(
      _id: PromiseOrValue<BigNumberish>,
      _allocation: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _id: PromiseOrValue<BigNumberish>,
      _investor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeProject(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAccessCount(
      _investor: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTier(
      _investor: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tier(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
